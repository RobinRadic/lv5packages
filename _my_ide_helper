<?php

/**
 *
 */
namespace IdeHelper
{
    use ArrayAccess;
    use ArrayIterator;
    class App extends \Illuminate\Foundation\Application implements ArrayAccess
    {
        /** @var \Illuminate\Events\Dispatcher */
        public $events;

        /** @var \Illuminate\Routing\Router */
        public $router;

        /** @var \Illuminate\Routing\UrlGenerator */
        public $url;
   c
        /** @var \Illuminate\Routing\Redirector */
        public $redirect;

        /** @var \ */
        public $env;

        /** @var \Illuminate\Auth\AuthManager */
        public $auth;

        /** @var \Illuminate\Config\Repository */
        public $config;

        /** @var \Illuminate\Cookie\CookieJar */
        public $cookie;

        /** @var \Illuminate\Database\DatabaseManager */
        public $db;

        /** @var \Illuminate\Encryption\Encrypter */
        public $encrypter;

        /** @var \Illuminate\Filesystem\Filesystem */
        public $files;

        /** @var \Illuminate\Filesystem\FilesystemManager */
        public $filesystem;

        /** @var \Illuminate\Session\SessionManager */
        public $session;

        /** @var \Illuminate\Validation\Factory */
        public $validator;

        /** @var \Illuminate\View\Factory */
        public $view;

        /** @var \Barryvdh\Debugbar\LaravelDebugbar */
        public $debugbar;

        /** @var \Radic\BladeExtensions\Renderers\ParsedownRenderer */
        public $markdown;

        /** @var array */
        static public $vars = [
            'events'                                            => 'Illuminate\Events\Dispatcher',
            'router'                                            => 'Illuminate\Routing\Router',
            'url'                                               => 'Illuminate\Routing\UrlGenerator',
            'redirect'                                          => 'Illuminate\Routing\Redirector',
            'Illuminate\Contracts\Routing\ResponseFactory'      => 'Illuminate\Routing\ResponseFactory',
            'env'                                               => '',
            'Illuminate\Contracts\Http\Kernel'                  => 'App\Http\Kernel',
            'Illuminate\Contracts\Console\Kernel'               => 'App\Console\Kernel',
            'Illuminate\Contracts\Debug\ExceptionHandler'       => 'App\Exceptions\Handler',
            'Illuminate\Foundation\Bootstrap\LoadConfiguration' => 'Laradic\Config\Bootstrap\LoadConfiguration',
            'path.public'                                       => '',
            'path.base'                                         => '',
            'Psr\Log\LoggerInterface'                           => 'Monolog\Logger',
            'auth'                                              => 'Illuminate\Auth\AuthManager',
            'auth.driver'                                       => 'Illuminate\Auth\Guard',
            'Illuminate\Contracts\Auth\Authenticatable'         => 'Laradic\Debug\Providers\RouteServiceProvider',
            'illuminate.route.dispatcher'                       => 'Illuminate\Routing\ControllerDispatcher',
            'cookie'                                            => 'Illuminate\Cookie\CookieJar',
            'Illuminate\Contracts\Queue\EntityResolver'         => 'Illuminate\Database\Eloquent\QueueEntityResolver',
            'db.factory'                                        => 'Illuminate\Database\Connectors\ConnectionFactory',
            'db'                                                => 'Illuminate\Database\DatabaseManager',
            'encrypter'                                         => 'Illuminate\Encryption\Encrypter',
            'files'                                             => 'Illuminate\Filesystem\Filesystem',
            'filesystem'                                        => 'Illuminate\Filesystem\FilesystemManager',
            'filesystem.disk'                                   => 'Illuminate\Filesystem\FilesystemAdapter',
            'session'                                           => 'Illuminate\Session\SessionManager',
            'session.store'                                     => 'Illuminate\Session\Store',
            'Illuminate\Session\Middleware\StartSession'        => 'Illuminate\Session\Middleware\StartSession',
            'validation.presence'                               => 'Illuminate\Validation\DatabasePresenceVerifier',
            'validator'                                         => 'Illuminate\Validation\Factory',
            'view.engine.resolver'                              => 'Illuminate\View\Engines\EngineResolver',
            'view.finder'                                       => 'Laradic\Themes\ThemeViewFinder',
            'view'                                              => 'Illuminate\View\Factory',
            'Illuminate\Contracts\Auth\Registrar'               => 'App\Services\Registrar',
            'config.publisher'                                  => 'Laradic\Config\Publisher',
            'debugbar'                                          => 'Barryvdh\Debugbar\LaravelDebugbar',
            'command.debugbar.clear'                            => 'Barryvdh\Debugbar\Console\ClearCommand',
            'auth.loaded'                                       => '',
            'command.ide-helper.generate'                       => 'Barryvdh\LaravelIdeHelper\Console\GeneratorCommand',
            'command.ide-helper.models'                         => 'Barryvdh\LaravelIdeHelper\Console\ModelsCommand',
            'laradic.logger'                                    => 'Laradic\Debug\LoggerFactory',
            'laradic.debugger'                                  => 'Laradic\Debug\Debugger',
            'blade.compiler'                                    => 'Illuminate\View\Compilers\BladeCompiler',
            'Radic\BladeExtensions\Contracts\MarkdownRenderer'  => 'Radic\BladeExtensions\Renderers\ParsedownRenderer',
            'markdown'                                          => 'Radic\BladeExtensions\Renderers\ParsedownRenderer',
            'markdown.compiler'                                 => 'Radic\BladeExtensions\Compilers\MarkdownCompiler',
            'Laradic\Themes\Contracts\Themes'                   => 'Laradic\Themes\ThemeFactory',
            'Laradic\Themes\Contracts\Assets'                   => 'Laradic\Themes\Assets\AssetFactory',
            'Illuminate\Bus\Dispatcher'                         => 'Illuminate\Bus\Dispatcher',
            'translation.loader'                                => 'Illuminate\Translation\FileLoader',
            'translator'                                        => 'Illuminate\Translation\Translator',

        ];

        public function __get($key)
        {
            return $this->vars[$key]; // TODO: Change the autogenerated stub
        }

        function __call($name, $arguments)
        {
            $this->vars[$name];
        }

    }



    use Closure;

    /**
     * Class Application
     *
     * @see         \Illuminate\Foundation\Application
     * abort
     * @method afterLoadingEnvironment
     * @method beforeBootstrapping
     * @method bindPathsInContainer
     * @method bootProvider
     * @method bootstrapWith
     * @method configPath
     * @method configurationIsCached
     * @method databasePath
     * @method detectEnvironment
     * @method down
     * @method environmentFile
     * @method fireAppCallbacks
     * @method flush
     * @method getCachedConfigPath
     * @method getCachedRoutesPath
     * @method getLoadedProviders
     * @method getLocale
     * @method getProvider
     * @method hasBeenBootstrapped
     * @method isBooted
     * @method isDeferredService
     * @method isLocal
     * @method langPath
     * @method loadDeferredProvider
     * @method loadDeferredProviders
     * @method loadEnvironmentFrom
     * @method markAsRegistered
     * @method path
     * @method publicPath
     * @method registerBaseBindings
     * @method registerBaseServiceProviders
     * @method registerCoreContainerAliases
     * @method resolveProviderClass
     * @method routesAreCached
     * @method runningInConsole
     * @method runningUnitTests
     * @method setBasePath
     * @method setDeferredServices
     * @method setLocale
     * @method storagePath
     * @method terminate
     * @method terminating
     * @method useStoragePath
     *
     */
    class Application extends App implements \Illuminate\Contracts\Foundation\Application
    {

        /**
         * Get the version number of the application.
         *
         * @return string
         */
        public function version()
        {
            // TODO: Implement version() method.
        }

        /**
         * Get the base path of the Laravel installation.
         *
         * @return string
         */
        public function basePath()
        {
            // TODO: Implement basePath() method.
        }

        /**
         * Get or check the current application environment.
         *
         * @param  mixed
         * @return string
         */
        public function environment()
        {
            // TODO: Implement environment() method.
        }

        /**
         * Determine if the application is currently down for maintenance.
         *
         * @return bool
         */
        public function isDownForMaintenance()
        {
            // TODO: Implement isDownForMaintenance() method.
        }

        /**
         * Register all of the configured providers.
         *
         * @return void
         */
        public function registerConfiguredProviders()
        {
            // TODO: Implement registerConfiguredProviders() method.
        }

        /**
         * Register a service provider with the application.
         *
         * @param  \Illuminate\Support\ServiceProvider|string $provider
         * @param  array                                      $options
         * @param  bool                                       $force
         * @return \Illuminate\Support\ServiceProvider
         */
        public function register($provider, $options = array(), $force = false)
        {
            // TODO: Implement register() method.
        }

        /**
         * Register a deferred provider and service.
         *
         * @param  string $provider
         * @param  string $service
         * @return void
         */
        public function registerDeferredProvider($provider, $service = null)
        {
            // TODO: Implement registerDeferredProvider() method.
        }

        /**
         * Boot the application's service providers.
         *
         * @return void
         */
        public function boot()
        {
            // TODO: Implement boot() method.
        }

        /**
         * Register a new boot listener.
         *
         * @param  mixed $callback
         * @return void
         */
        public function booting($callback)
        {
            // TODO: Implement booting() method.
        }

        /**
         * Register a new "booted" listener.
         *
         * @param  mixed $callback
         * @return void
         */
        public function booted($callback)
        {
            // TODO: Implement booted() method.
        }

        /**
         * Determine if the given type has been bound.
         *
         * @param  string $abstract
         * @return bool
         */
        public function bound($abstract)
        {
            // TODO: Implement bound() method.
        }

        /**
         * Alias a type to a different name.
         *
         * @param  string $abstract
         * @param  string $alias
         * @return void
         */
        public function alias($abstract, $alias)
        {
            // TODO: Implement alias() method.
        }

        /**
         * Assign a set of tags to a given binding.
         *
         * @param  array|string $abstracts
         * @param  array|mixed  ...$tags
         * @return void
         */
        public function tag($abstracts, $tags)
        {
            // TODO: Implement tag() method.
        }

        /**
         * Resolve all of the bindings for a given tag.
         *
         * @param  array $tag
         * @return array
         */
        public function tagged($tag)
        {
            // TODO: Implement tagged() method.
        }

        /**
         * Register a binding with the container.
         *
         * @param  string|array         $abstract
         * @param  \Closure|string|null $concrete
         * @param  bool                 $shared
         * @return void
         */
        public function bind($abstract, $concrete = null, $shared = false)
        {
            // TODO: Implement bind() method.
        }

        /**
         * Register a binding if it hasn't already been registered.
         *
         * @param  string               $abstract
         * @param  \Closure|string|null $concrete
         * @param  bool                 $shared
         * @return void
         */
        public function bindIf($abstract, $concrete = null, $shared = false)
        {
            // TODO: Implement bindIf() method.
        }

        /**
         * Register a shared binding in the container.
         *
         * @param  string               $abstract
         * @param  \Closure|string|null $concrete
         * @return void
         */
        public function singleton($abstract, $concrete = null)
        {
            // TODO: Implement singleton() method.
        }

        /**
         * "Extend" an type in the container.
         *
         * @param  string   $abstract
         * @param  \Closure $closure
         * @return void
         *
         * @throws \InvalidArgumentException
         */
        public function extend($abstract, Closure $closure)
        {
            // TODO: Implement extend() method.
        }

        /**
         * Register an existing instance as shared in the container.
         *
         * @param  string $abstract
         * @param  mixed  $instance
         * @return void
         */
        public function instance($abstract, $instance)
        {
            // TODO: Implement instance() method.
        }

        /**
         * Define a contextual binding.
         *
         * @param  string $concrete
         * @return \Illuminate\Contracts\Container\ContextualBindingBuilder
         */
        public function when($concrete)
        {
            // TODO: Implement when() method.
        }

        /**
         * Resolve the given type from the container.
         *
         * @param  string $abstract
         * @param  array  $parameters
         * @return mixed
         */
        public function make($abstract, $parameters = array())
        {
            // TODO: Implement make() method.
        }

        /**
         * Call the given Closure / class@method and inject its dependencies.
         *
         * @param  callable|string $callback
         * @param  array           $parameters
         * @param  string|null     $defaultMethod
         * @return mixed
         */
        public function call($callback, array $parameters = array(), $defaultMethod = null)
        {
            // TODO: Implement call() method.
        }

        /**
         * Determine if the given type has been resolved.
         *
         * @param  string $abstract
         * @return bool
         */
        public function resolved($abstract)
        {
            // TODO: Implement resolved() method.
        }

        /**
         * Register a new resolving callback.
         *
         * @param  string   $abstract
         * @param  \Closure $callback
         * @return void
         */
        public function resolving($abstract, Closure $callback = null)
        {
            // TODO: Implement resolving() method.
        }

        /**
         * Register a new after resolving callback.
         *
         * @param  string   $abstract
         * @param  \Closure $callback
         * @return void
         */
        public function afterResolving($abstract, Closure $callback = null)
        {
            // TODO: Implement afterResolving() method.
        }
        /**
         * Determine if a given offset exists.
         *
         * @param  string  $key
         * @return bool
         */
        public function offsetExists($key)
        {
            return isset($this->bindings[$key]);
        }

        /**
         * Get the value at a given offset.
         *
         * @param  string  $key
         * @return mixed
         */
        public function offsetGet($key)
        {
            return $this->make($key);
        }

        /**
         * Set the value at a given offset.
         *
         * @param  string  $key
         * @param  mixed   $value
         * @return void
         */
        public function offsetSet($key, $value)
        {
            // If the value is not a Closure, we will make it one. This simply gives
            // more "drop-in" replacement functionality for the Pimple which this
            // container's simplest functions are base modeled and built after.
            if ( ! $value instanceof Closure)
            {
                $value = function() use ($value)
                {
                    return $value;
                };
            }

            $this->bind($key, $value);
        }

        /**
         * Unset the value at a given offset.
         *
         * @param  string  $key
         * @return void
         */
        public function offsetUnset($key)
        {
            unset($this->bindings[$key], $this->instances[$key], $this->resolved[$key]);
        }

        /**
         * Dynamically access container services.
         *
         * @param  string  $key
         * @return mixed
         */
        public function __get($key)
        {
            return $this[$key];
        }

        /**
         * Dynamically set container services.
         *
         * @param  string  $key
         * @param  mixed   $value
         * @return void
         */
        public function __set($key, $value)
        {
            $this[$key] = $value;
        }
    }
}
